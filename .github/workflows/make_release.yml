on:
  push:
    branches:
      - v[0-9]+.[0-9]+.0
    tags:
      - 'v*'

name: Create Release

jobs:
  build_linux_37_and_above_wheels:
    name: Build python ${{ matrix.cibw_python }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04]
        cibw_python: [ "cp37-*", "cp38-*" ]
        cibw_manylinux: [ manylinux1 ]
        include:
          - os: ubuntu-18.04
            cibw_python: "cp39-*"
            cibw_manylinux: manylinux2010
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64
      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel
          python -m pip check
      - name: Build the wheel
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_ARCHS_LINUX: auto aarch64
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.cibw_manylinux }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.cibw_manylinux }}
          CIBW_TEST_REQUIRES: pytest pooch pytest-localserver pytest-faulthandler
          CIBW_TEST_COMMAND: pytest --pyargs skimage
      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./dist/*.whl

  build_macos_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel
      - name: Build wheels for CPython 3.9 and Mac OS
        run: |
          brew install libomp
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "cp39-*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
          CIBW_MANYLINUX_I686_IMAGE: manylinux1
          # CIBW_BEFORE_BUILD: pip install certifi numpy==1.19.3
          CC: /usr/bin/clang
          CXX: /usr/bin/clang++
          CPPFLAGS: "-Xpreprocessor -fopenmp"
          CFLAGS: "-Wno-implicit-function-declaration -I/usr/local/opt/libomp/include"
          CXXFLAGS: "-I/usr/local/opt/libomp/include"
          LDFLAGS: "-Wl,-rpath,/usr/local/opt/libomp/lib -L/usr/local/opt/libomp/lib -lomp"
          CIBW_TEST_REQUIRES: pytest pooch pytest-localserver pytest-faulthandler
          CIBW_TEST_COMMAND: pytest --pyargs skimage

      - name: Build wheels for CPython (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install libomp
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "cp3?-*"
          CIBW_SKIP: "cp35-* cp36-* cp39-*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
          CIBW_MANYLINUX_I686_IMAGE: manylinux1
          # CIBW_BEFORE_BUILD: pip install certifi numpy==1.16
          CC: /usr/bin/clang
          CXX: /usr/bin/clang++
          CPPFLAGS: "-Xpreprocessor -fopenmp"
          CFLAGS: "-Wno-implicit-function-declaration -I/usr/local/opt/libomp/include"
          CXXFLAGS: "-I/usr/local/opt/libomp/include"
          LDFLAGS: "-Wl,-rpath,/usr/local/opt/libomp/lib -L/usr/local/opt/libomp/lib -lomp"
          CIBW_TEST_REQUIRES: pytest pooch pytest-localserver pytest-faulthandler
          CIBW_TEST_COMMAND: pytest --pyargs skimage

      - name: Build wheels for CPython 3.6
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "cp36-*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
          CIBW_MANYLINUX_I686_IMAGE: manylinux1
          # CIBW_BEFORE_BUILD: pip install certifi numpy==1.16
        if: >
          startsWith(github.ref, 'refs/heads/v0.17') ||
          startsWith(github.ref, 'refs/tags/v0.17')
      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./dist/*.whl

  build_windows_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel
      - name: Build wheels for CPython 3.9 (Linux and Windows)
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "cp39-*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
          CIBW_MANYLINUX_I686_IMAGE: manylinux1
          # CIBW_BEFORE_BUILD: pip install certifi numpy==1.19.3
          CIBW_TEST_REQUIRES: pytest pooch pytest-localserver pytest-faulthandler
          CIBW_TEST_COMMAND: pytest --pyargs skimage

      - name: Build Windows wheels for CPython
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "cp3?-*"
          CIBW_SKIP: "cp35-* cp36-* cp39-*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
          CIBW_MANYLINUX_I686_IMAGE: manylinux1
          # CIBW_BEFORE_BUILD: pip install certifi numpy==1.16
          CIBW_TEST_REQUIRES: pytest pooch pytest-localserver pytest-faulthandler
          CIBW_TEST_COMMAND: pytest --pyargs skimage

      - name: Build wheels for CPython 3.6
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "cp36-*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
          CIBW_MANYLINUX_I686_IMAGE: manylinux1
          # CIBW_BEFORE_BUILD: pip install certifi numpy==1.16
        if: >
          startsWith(github.ref, 'refs/heads/v0.17') ||
          startsWith(github.ref, 'refs/tags/v0.17')
      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./dist/*.whl

  deploy:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
      
      - name: Install wheel-uploader
        run: |
          wget -L https://raw.githubusercontent.com/MacPython/terryfy/master/wheel-uploader
          mv wheel-uploader $PATH
      
      - name: Download artifact wheels
        uses: actions/download-artifact@v2
        with:
          name: wheels
          path: ./dist/*.whl
 
      - name: Upload wheels to PyPI
        run: |
          tools/upload_wheels.sh
          python setup.py sdist
          export SK_VERSION=$(git describe --tags)
          twine check .dist/scikit-image-${SK_VERSION:1}.tar.gz
      
      - name: Publish the release on github
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ env.tag }}
          body: ${{ steps.release_notes.outputs.contents }}
          draft: false
          prerelease: ${{ contains(github.ref, 'rc') }}
      
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/scikit-image-${SK_VERSION:1}.tar.gz
          asset_name: scikit-image-${SK_VERSION:1}.tar.gz
          asset_content_type: application/gzip